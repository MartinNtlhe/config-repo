server:
  port: ${PORT:0}

management:
  endpoints:
    web:
      base-path: /manage

endpoints:
  env:
    keys-to-sanitize: pwd,uid,password,secret,key,client_id,client_key # suffix or regex

logging:
  level:
    com.netflix: INFO
    org.springframework.cloud: INFO
    io.pivotal.sfdc: INFO

info:
  component: Account Service
  build:
    name: ${project.name:accountService}
    description: ${project.description:SFDC Account Service}
    version: ${project.version:0.0.1-SNAPSHOT}
    group: ${project.groupId:io.pivotal.sfdc}
    artifact: ${project.artifactId:accountService}

sfdc:
  service:
    unavailable: '{"status":503,"data": "Service currently unavailable."}'
  authservice:
    endpoint: http://authservice
  query:
    accounts: select account.id, account.name, account.type, (select contact.id, contact.lastname from account.contacts) from account
    opp_by_accts: select account.id, account.name, account.type, (select opportunity.id, opportunity.name, opportunity.type, opportunity.amount, opportunity.stagename, opportunity.closedate from account.opportunities) from account
    loadsql: select account.id, account.name, account.type, account.description, account.industry, account.ownership, account.website, account.phone, account.NumberOfEmployees, (select contact.id, contact.title, contact.department, contact.email, contact.name, contact.salutation, contact.phone, contact.mobilePhone, contact.firstName, contact.accountId, contact.lastname from account.contacts), (select opportunity.id, opportunity.name, opportunity.type, opportunity.amount, opportunity.stagename, opportunity.closedate, opportunity.description, opportunity.nextStep, opportunity.leadSource, opportunity.accountId from account.opportunities) from account

test:
  message: Hello, Jig!

---
spring:
  profiles: local
  instance:
    nonSecurePort: ${server.port}
  redis:
    host: redis
    port: 6379
eureka:
  instance:
    preferIpAddress: true
    hostname: accountservice
    nonSecurePort: ${server.port}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${EUREKA_HOST:discovery}:8761/eureka/
# Ribbon Configurations
producer:
  ribbon:
    ServerListRefreshInterval: 5000
ribbon:
  IsSecure: false
---
spring:
  profiles: cloud # For deployment in Cloud Foundry
  cloud:
    services:
      registrationMethod: direct
producer:
  ribbon:
    ServerListRefreshInterval: 5000
ribbon:
  IsSecure: false
