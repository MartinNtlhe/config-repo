server:
  port: ${PORT:0}

spring:
  sleuth.sampler.percentage: 1.0
  sleuth.sampler.probability: 1.0
  zipkin.sender.type: rabbit
  rabbitmq.listener.direct.retry.enabled: true
  rabbitmq.listener.simple.retry.enabled: true

management:
  cloudfoundry:
    skip-ssl-validation: true
    enabled: true
  endpoints:
    web:
      base-path: /manage
      exposure:
        include: '*'
  endpoint:
    health:
      roles: USER
      show-details: always
    configprops:
      # keys-to-sanitize:  password # suffix or regex
      keys-to-sanitize: "password,secret"
      # pwd,uid,password,secret,key,client_id,client_key # suffix or regex
    env:
      keys-to-sanitize: "password,secret"
      # password,secret,key,token,.*credentials.*,vcap_services # suffix or regex
# password,secret,key,token,.*credentials.*,vcap_services

logging:
  level:
    com.netflix.eureka: ERROR
    com.netflix.discovery: ERROR
    org.springframework.cloud: ERROR
    io.pivotal.sfdc: DEBUG

sfdc:
  service:
    unavailable: '{"status":503,"data": "Service currently unavailable."}'
  query:
    accounts: select account.id, account.name, account.type, (select contact.id, contact.lastname from account.contacts) from account
    opp_by_accts: select account.id, account.name, account.type, (select opportunity.id, opportunity.name, opportunity.type, opportunity.amount, opportunity.stagename, opportunity.closedate from account.opportunities) from account
    loadsql: select account.id, account.name, account.type, account.description, account.industry, account.ownership, account.website, account.phone, account.NumberOfEmployees, (select contact.id, contact.title, contact.department, contact.email, contact.name, contact.salutation, contact.phone, contact.mobilePhone, contact.firstName, contact.accountId, contact.lastname from account.contacts), (select opportunity.id, opportunity.name, opportunity.type, opportunity.amount, opportunity.stagename, opportunity.closedate, opportunity.description, opportunity.nextStep, opportunity.leadSource, opportunity.accountId from account.opportunities) from account
---
spring:
  profiles: local
  instance:
    nonSecurePort: ${server.port}
  redis:
    host: ${REDIS_HOST:redis}
    port: 6379
eureka:
  instance:
    preferIpAddress: true
    hostname: accountservice
    nonSecurePort: ${server.port}
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
  client:
    registerWithEureka: true
    fetchRegistry: true
    registryFetchIntervalSeconds: 10
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://${EUREKA_HOST:discovery}:8761/eureka/
ribbon:
  IsSecure: false
---
spring:
  profiles: cloud # For deployment in Cloud Foundry
  cloud:
    services:
      registrationMethod: direct
  redis:
    host: ${vcap.services.cache-service.credentials.host:redis}
    port: ${vcap.services.cache-service.credentials.port:6379}
    password: ${vcap.services.cache-service.credentials.password}
  rabbitmq:
    addresses: ${vcap.services.event-bus.credentials.uri}
    # host: ${vcap.services.event-bus.credentials.hostname}
    # port: ${vcap.services.event-bus.credentials.port}
    # virtual-host: ${vcap.services.event-bus.credentials.vhost}
    # username: ${vcap.services.event-bus.credentials.username}
    # password: ${vcap.services.event-bus.credentials.password}
    ssl.enabled: ${vcap.services.event-bus.credentials.ssl}
    ssl.algorithm: TLSv1.2
eureka:
  instance:
    nonSecurePortEnabled: true
    nonSecurePort: 8080
    securePortEnabled: true
    securePort: 61001
    hostname: ${vcap.application.uris[0]}
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
  client:
    registerWithEureka: true
    fetchRegistry: true
    registryFetchIntervalSeconds: 10
    healthcheck:
      enabled: true
ribbon:
  IsSecure: true
